Q1. (FCFS)
#include<stdio.h>
int main()
{
int n,bt[20],wt[20],tat[20],avwt=0,avtat=0,i,j;
printf("Enter total number of processes(maximum 20):");
scanf("%d",&n);
printf("\nEnter Process Burst Time\n");
for(i=0;i<n;i++)
{
printf("P[%d]:",i+1);
scanf("%d",&bt[i]);
}
wt[0]=0; //waiting time for first process is 0
//calculating waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
}
printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time");
//calculating turnaround time
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i];
avwt+=wt[i];
avtat+=tat[i];
printf("\nP[%d]\t\t%d\t\t%d\t\t%d",i+1,bt[i],wt[i],tat[i]);
}

avwt/=i;
avtat/=i;
printf("\n\nAverage Waiting Time:%d",avwt);
printf("\nAverage Turnaround Time:%d",avtat);
return 0;
}




(Priority)
#include<stdio.h>
int main()
{
int
bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
printf("Enter Total Number of Process:");
scanf("%d",&n);
printf("\nEnter Burst Time and Priority\n");
for(i=0;i<n;i++)
{

printf("\nP[%d]\n",i+1);
printf("Burst Time:");
scanf("%d",&bt[i]);
printf("Priority:");
scanf("%d",&pr[i]);
p[i]=i+1; //contains process number
}
//sorting burst time, priority and process number in ascending order
using selection sort
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(pr[j]<pr[pos])
pos=j;
}
temp=pr[i];
pr[i]=pr[pos];
pr[pos]=temp;
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; //waiting time for first process is zero
//calculate waiting time
for(i=1;i<n;i++)
{

wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=total/n; //average waiting time
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\nP[%d]\t\t %d\t\t
%d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%d",avg_wt);
printf("\nAverage Turnaround Time=%d\n",avg_tat);
return 0;
}




(SJF)

#include<stdio.h>
void main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("p%d:",i+1);

scanf("%d",&bt[i]);
p[i]=i+1; //contains process number
}
//sorting burst time in ascending order using selection sort
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[pos])
pos=j;
}
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; //waiting time for first process will be zero
//calculate waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n; //average waiting time
total=0;

printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
}




(Round Robin)
#include<iostream>

using namespace std;

int main(){
    int ct=0,nop,tq,i;
    int total_wt=0,total_tat=0;
    cout<<"Enter number of processes(NOP): ";
    cin>>nop;
    int at[nop],bt[nop],rt[nop];
    int count=nop;
    
    cout<<"Enter time quantum: ";
    cin>>tq;
    cout<<"Enter Arrival time(AT) & Burst time(BT) of processes: ";
    for(i=0;i<nop;i++){
        cin>>at[i];
        cin>>bt[i];
 
        rt[i]=bt[i];  //remaining time = brust time at start
    }
    cout<<"ID\tAT\tBT\tTAT\tWt\tCT"<<endl;
    for(i=0;count!=0;){ //until count(processes) not equal to 0
        if(rt[i]<=tq && rt[i]>0){
            ct=ct+rt[i];
            rt[i]=0;
            count--;
            cout<<"P"<<i+1<<"\t"<<at[i]<<"\t"<<bt[i]<<"\t"<<ct - at[i]<<"\t"<<ct - at[i] - bt[i] <<"\t"<<ct<<endl;
            total_wt=total_wt + ct - at[i] - bt[i];
            total_tat = total_tat + ct - at[i];
        }
        else if(rt[i]>0){
            rt[i]=rt[i]-tq;
            ct=ct+tq;
        }
        if(i==nop-1){
            i=0;
        }
        else if(at[i+1]<=ct){
            i++;
        }
        else{
            i=0;
        }
    }
    cout<<"Average TAT: "<<(float)total_tat/nop<<endl;
    cout<<"Average WT: "<<(float)total_wt/nop<<endl;
}




(Bankers algo)
#include <iostream>

using namespace std;

int main()
{
    //int n = 5;// No. of processes
    //int m = 3;// No. of resources
    int avai[3] ={ 4, 4, 8 };
    // Maximum Resources available
    int max[5][3] = {
        {5, 7, 6},
        {4, 2, 9},
        {6, 7, 5},
        {4, 10, 3},
        {3, 1, 5}};
    // Allocated Resources
    int alloc[5][3] = {
        {0, 2, 1},
        {3, 1, 0},
        {0, 2, 1},
        {4, 0, 2},
        {1, 1, 0}};
    // Needed Resources = Max Resources - Allocated Resources
    int need[5][3];
    for(int i = 0;i < 5;i++)
    {
        for(int j = 0;j < 3;j++)
        {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
    int f[5];
    // Considering all processes to be uncompleted
    for(int i = 0;i < 5;i++)
    {
        f[i] = 0;
    }
    cout << "Safe Sequence:- " << endl;
    for(int i = 0;i < 5;i++)
    {
        if(f[i] == 1)
            continue;
        int l = 0;
        for(int j = 0;j < 3;j++)
        {
            // Need < Available
            if(need[i][j] < avai[j] || need[i][j] == avai[j])
                l++;
            if(l == 3)
            {
                f[i] = 1;
                for(int x = 0;x < 3;x++)
                {
                    avai[x] = avai[x] + alloc[i][x];// Updating available resources
                }
                cout << "P" << i << " ";
                i = -1;//Checking from start again
            }
        }
    }
    cout << endl;
    return 0;
}



best fit
#include <iostream>
using namespace std;

void best_fit(int *block_size, int *process_size, int m, int n){

int allocation[n];
for (int i = 0; i < n; i++)
{
    allocation[i] = -1;
}

int temp = 0;
for (int i = 0; i < n; i++)
{
int wstIdex =-1;

    for (int j = 0; j< m; j++)
    {
        if(block_size[j]>=process_size[i]){
          if(wstIdex==-1){
            wstIdex = j;
          }
          else {
          temp = wstIdex;
          if(block_size[j]<block_size[temp]){
           wstIdex = j;
          }
          }
        }
    }

if(wstIdex!=-1){
    allocation[i] = wstIdex;
block_size[wstIdex] -= process_size[i];
}
}

cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++)
    {
        cout << "   " << i+1 << "\t\t" << process_size[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }

}

int main(){

int block_size[] = {100, 500, 200, 300, 600};
int process_size[] = {212, 417, 112, 426};
int m = sizeof(block_size)/sizeof(block_size[0]);
int n = sizeof(process_size)/sizeof(process_size[0]);

best_fit(block_size, process_size, m ,n);

    return 0;
}




worst fit
#include <iostream>
using namespace std;

void worst_fit(int *block_size, int *process_size, int m, int n){

int allocation[n];

for (int i = 0; i < n; i++)
{
    allocation[i] = -1;
}

int temp = 0;

for (int i = 0; i < n; i++)
{
    
int wstIdex =-1;

    for (int j = 0; j< m; j++)
    {
        if(block_size[j]>=process_size[i]){
          if(wstIdex==-1){
            wstIdex = j;
          }
          else {
          temp = wstIdex;
          if(block_size[j]>block_size[temp]){
           wstIdex = j;
          }
          }
        }
    }

if(wstIdex!=-1){
    allocation[i] = wstIdex;
block_size[wstIdex] -= process_size[i];
}
}

cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++)
    {
        cout << "   " << i+1 << "\t\t" << process_size[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }

}

int main(){

int block_size[] = {100, 500, 200, 300, 600};
int process_size[] = {212, 417, 112, 426};
int m = sizeof(block_size)/sizeof(block_size[0]);
int n = sizeof(process_size)/sizeof(process_size[0]);

worst_fit(block_size, process_size, m ,n);

    return 0;
}




(first fit)
#include <iostream>
using namespace std;

void first_fit(int *block_size, int m, int * process_size, int n){

int allocation[n];
for (int i = 0; i < n; i++)
{
    allocation[i]= -1;
}

for (int i = 0; i < n; i++)
{
    int wstIdex = -1;
    
    for (int j = 0; j < m; j++)
    {
        if(block_size[j]>=process_size[i]){
            wstIdex = j;
            break;
        }
    }

    if (wstIdex!=-1){
        allocation[i] = wstIdex;
        block_size[wstIdex]-= process_size[i];
    }
}

cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++)
    {
        cout << "   " << i+1 << "\t\t" << process_size[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }

}

int main(){

int block_size[] = {100, 500, 200, 300, 600};
int process_size[] = {212, 417, 112, 426};
int m = sizeof(block_size)/sizeof(block_size[0]);
int n = sizeof(process_size)/sizeof(process_size[0]);

first_fit(block_size, m, process_size,n);

    return 0;
}